import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as l,c as e,a as o}from"./app-qSMjXEym.js";const c={},t=o('<h1 id="前端性能优化建议" tabindex="-1"><a class="header-anchor" href="#前端性能优化建议" aria-hidden="true">#</a> 前端性能优化建议</h1><ol><li>减少 HTTP 请求</li><li>使用 HTTP2</li><li>使用服务端渲染</li><li>静态资源使用 CDN</li><li>将 CSS 放在文件头部，JavaScript 文件放在底部</li><li>使用字体图标 iconfont 代替图片图标</li><li>善用缓存，不重复加载相同的资源</li><li>压缩文件</li><li>图片优化</li><li>通过webpack按需加载代码，提取第三库代码，减少ES6转为ES5的冗余代码</li><li>减少重绘重排</li><li>使用事件委托</li><li>使用 Web Workers</li><li>不要覆盖原生方法</li><li>降低 CSS 选择器的复杂性</li><li>使用 flexbox 而不是较早的布局模型</li><li>使用 transform 和 opacity 属性更改来实现动画</li></ol><h2 id="构建策略" tabindex="-1"><a class="header-anchor" href="#构建策略" aria-hidden="true">#</a> 构建策略</h2><ul><li><strong>减少打包时间</strong>：<code>缩减范围</code>、<code>缓存副本</code>、<code>定向搜索</code>、<code>提前构建</code>、<code>并行构建</code>、<code>可视结构</code></li><li><strong>减少打包体积</strong>：<code>分割代码</code>、<code>摇树优化</code>、<code>动态垫片</code>、<code>按需加载</code>、<code>作用提升</code>、<code>压缩资源</code></li></ul><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h2><p><strong>分割</strong></p><blockquote><p>配置<code>BundleAnalyzer</code>分析打包文件结构，找出导致体积过大的原因。</p></blockquote><ol><li>CDN: 对于第三方包可以搭配externals与webpackHtmlPlugin由CDN外部加载，</li><li>异步加载: 对于路由/触发性功能单独打包为一个文件，使用时加载。</li><li>按需引入: 分模块导入，只导入所需部分。</li></ol><p><strong>http</strong></p><ol><li>使用http2</li></ol><p><strong>压缩</strong></p><ol><li>compression-webpack-plugin - gzip压缩</li><li>uglifyjs-webpack-plugin - js压缩</li><li>optimize-css-assets-webpack-plugin - CSS代码压缩</li><li>mini-css-extract-plugin - 提取为独立的CSS文件</li></ol><p><strong>图标</strong></p><ol><li>合并图标成精灵图</li><li>小尺寸图片转base64</li><li>使用图标字体或svg替代图标</li></ol>',14),d=[t];function a(r,n){return l(),e("div",null,d)}const h=i(c,[["render",a],["__file","index.html.vue"]]);export{h as default};
