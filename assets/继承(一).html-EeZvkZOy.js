const e=JSON.parse('{"key":"v-622f6ece","path":"/language/javascript/%E7%BB%A7%E6%89%BF(%E4%B8%80).html","title":"继承(一)","lang":"zh-CN","frontmatter":{"date":"2022-06-30T00:00:00.000Z","category":["language"],"tag":["JS"],"description":"继承的本质就是复制，即重写原型对象，代之以一个新类型的实例。 1. 继承父类的实例属性 2. 继承父类的原型 原型链继承 将子类的原型链指向父类的实例 缺点: 1. 原型链中引用类型的属性会被所有实例共享的，所有实例对象使用的是同一份数据，会造成相互影响。 2. 在创建子类的实例时，无法向父级构造函数传参 借用构造函数(经典继承) 在子级构造函数中调用...","head":[["meta",{"property":"og:url","content":"https://github.com/utaware/language/javascript/%E7%BB%A7%E6%89%BF(%E4%B8%80).html"}],["meta",{"property":"og:site_name","content":"utaware"}],["meta",{"property":"og:title","content":"继承(一)"}],["meta",{"property":"og:description","content":"继承的本质就是复制，即重写原型对象，代之以一个新类型的实例。 1. 继承父类的实例属性 2. 继承父类的原型 原型链继承 将子类的原型链指向父类的实例 缺点: 1. 原型链中引用类型的属性会被所有实例共享的，所有实例对象使用的是同一份数据，会造成相互影响。 2. 在创建子类的实例时，无法向父级构造函数传参 借用构造函数(经典继承) 在子级构造函数中调用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-28T02:40:55.000Z"}],["meta",{"property":"article:author","content":"utaware"}],["meta",{"property":"article:tag","content":"JS"}],["meta",{"property":"article:published_time","content":"2022-06-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-28T02:40:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"继承(一)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-28T02:40:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"utaware\\",\\"url\\":\\"https://github.com/utaware\\"}]}"]]},"headers":[{"level":2,"title":"原型链继承","slug":"原型链继承","link":"#原型链继承","children":[]},{"level":2,"title":"借用构造函数(经典继承)","slug":"借用构造函数-经典继承","link":"#借用构造函数-经典继承","children":[]},{"level":2,"title":"组合继承","slug":"组合继承","link":"#组合继承","children":[]},{"level":2,"title":"原型式继承","slug":"原型式继承","link":"#原型式继承","children":[]},{"level":2,"title":"寄生式继承","slug":"寄生式继承","link":"#寄生式继承","children":[]},{"level":2,"title":"寄生组合式继承","slug":"寄生组合式继承","link":"#寄生组合式继承","children":[]},{"level":2,"title":"ES6继承","slug":"es6继承","link":"#es6继承","children":[]}],"git":{"createdTime":1711593655000,"updatedTime":1711593655000,"contributors":[{"name":"utaware","email":"1264051408@qq.com","commits":1}]},"readingTime":{"minutes":2.97,"words":890},"filePathRelative":"language/javascript/继承(一).md","localizedDate":"2022年6月30日","excerpt":"","autoDesc":true}');export{e as data};
