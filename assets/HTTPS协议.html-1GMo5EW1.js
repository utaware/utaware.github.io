import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as a,o,c as r,b as i,d as l,e as c,w as h,a as T}from"./app-qSMjXEym.js";const n={},d=i("h1",{id:"https协议",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#https协议","aria-hidden":"true"},"#"),l(" HTTPS协议")],-1),s=T('<blockquote><p>HTTPS = HTTP + 加密 + 认证 + 完整性保护</p></blockquote><h2 id="http的缺陷" tabindex="-1"><a class="header-anchor" href="#http的缺陷" aria-hidden="true">#</a> HTTP的缺陷</h2><ul><li>HTTP协议传输的数据是明文的，未经过加密处理，任何人都可以截获传输的数据并进行监听</li><li>HTTP协议没有对传输的数据进行完整性校验的机制，意味着在传输过程中数据可能会被篡改</li><li>HTTP协议本身没有提供对服务器或客户端身份进行验证的机制</li></ul><h2 id="加密方式" tabindex="-1"><a class="header-anchor" href="#加密方式" aria-hidden="true">#</a> 加密方式</h2><ul><li>对称加密: 算法公开、计算量小、加密速度快、加密效率高。</li><li>非对称加密: 算法复杂、运算速度慢、加密效率低。</li></ul><p>HTTPS采用非对称加密 + 对称加密 + CA证书认证，在交换密钥环节使用非对称加密方式，建立通信交换报文阶段则使用对称加密方式。提高了密钥交换的安全性，又减少了通信过程中的加密解密开销。但即便如此，依旧存在数据数据被伪装篡改的风险(中间人攻击)，为了解决这些问题加入了CA证书认证</p><h2 id="ca证书" tabindex="-1"><a class="header-anchor" href="#ca证书" aria-hidden="true">#</a> CA证书</h2><p>服务端在使用HTTPS前，需要向CA机构申领一份数字证书，数字证书⾥含有证书申请者信息、公钥信息等。服务器把证书传输给浏览器，浏览器从证书里获取公钥就行了，证书就如身份证，证明服务端公钥的权威性。</p><p>证书所包含的主要信息：</p><ul><li>证书持有人信息</li><li>证书持有人的公钥</li><li>证书颁发机构信息</li><li>证书序列号</li><li>证书的有效期限</li><li>数字签名</li></ul><p>数字签名过程:</p><ol><li>CA机构拥有非对称加密的私钥A和公钥A&#39;</li><li>CA机构对服务端申请的证书明文数据进行hash，形成数据摘要</li><li>然后对数据摘要用CA私钥A&#39;加密，得到数字签名S</li></ol><blockquote><p>服务端申请的证书明文 + 数字签名S -&gt; 数字证书</p></blockquote><p>特点：</p><ol><li>唯一性：理论上，不同的数据生成的数字摘要应该是唯一的。即使数据中只有微小的差异，生成的数字指纹也会有显著的变化。</li><li>不可逆性：数字指纹的生成算法具有不可逆性，不能通过数字指纹还原出原始数据。这样可以保护原始数据的机密性。</li><li>固定长度：生成的数字指纹具有固定的长度。不论输入数据多长，都会生成指定长度的数字指纹。</li><li>敏感性：对于输入数据的微小改动，生成的数字指纹也会有较大的差异。这使得数字指纹可以用于检测数据是否被篡改。</li></ol><p>认证过程：</p><ol><li>客户端请求：当客户端与服务器进行通信时，服务器会将其CA证书发送给客户端。</li><li>证书解析：客户端收到服务器的证书后，首先会对证书进行解析，提取其中的信息。</li><li>CA证书验证：客户端使用预先内置或可信任的根证书（Root Certificate）或中间证书（Intermediate Certificate）对接收到的CA证书进行验证。</li><li>验证签名：接收者获取到原始数据、数字签名和签名者的公钥（公钥也可能会在浏览器中保存）。接收者使用签名者的公钥（CA公钥是公开的）对数字签名进行解密操作，得到解密后的数据摘要。然后，接收者对原始数据进行同样的哈希计算，生成新的数据摘要。最后将两个数据摘要进行比较，如果相同，则说明数据完整且未被篡改，数字签名有效。</li><li>证书链验证：如果颁发该证书的证书颁发机构是中间证书颁发机构，客户端还需要使用内置的根证书验证其合法性。这个验证过程称为证书链验证，确保整个证书链的信任和完整性。</li><li>证书有效期验证：客户端检查证书中的有效期限，确保该证书仍在有效期内。过期的证书将被认为不受信任。</li><li>身份和安全性确认：一旦通过以上验证过程，客户端可以确认服务器的身份和证书的安全性。客户端会使用服务器证书中包含的公钥对通信过程中的数据进行加密，并根据证书中的身份信息来判断是否信任该服务器。</li></ol>',17);function p(u,_){const e=a("RouterLink");return o(),r("div",null,[d,i("p",null,[l("HTTPS协议是对HTTP协议的一种扩展，在HTTP的基础上加入了"),c(e,{to:"/web/HTTP/TLS%E5%8D%8F%E8%AE%AE.html"},{default:h(()=>[l("SSL/TLS")]),_:1}),l("协议进行数据加密和认证。使得通过HTTPS传输的数据更加安全可靠")]),s])}const P=t(n,[["render",p],["__file","HTTPS协议.html.vue"]]);export{P as default};
