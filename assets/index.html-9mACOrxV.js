import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as p,c as e,b as n,d as c,e as o,a as i}from"./app-qSMjXEym.js";const l={},u=i(`<h1 id="jsbridge原理" tabindex="-1"><a class="header-anchor" href="#jsbridge原理" aria-hidden="true">#</a> JSBridge原理</h1><p>主要是给JavaScript提供调用Native功能的接口，让混合开发中的『前端部分』可以方便地使用地址位置、摄像头甚至支付等Native功能。核心是构建Native与非Native间消息通信的通道，而且是双向通信的通道。</p><h2 id="javascript-调用-native" tabindex="-1"><a class="header-anchor" href="#javascript-调用-native" aria-hidden="true">#</a> JavaScript 调用 Native</h2><ul><li>注入 API</li><li>拦截 URL SCHEME</li></ul><h3 id="注入api" tabindex="-1"><a class="header-anchor" href="#注入api" aria-hidden="true">#</a> 注入API</h3><blockquote><p>通过 WebView 提供的接口，向 JavaScript 的 Context（window）中注入对象或者方法，让 JavaScript 调用时，直接执行相应的 Native 代码逻辑，达到 JavaScript 调用 Native 的目的。</p></blockquote><h3 id="拦截url-scheme" tabindex="-1"><a class="header-anchor" href="#拦截url-scheme" aria-hidden="true">#</a> 拦截URL SCHEME</h3><blockquote><p>Web 端通过某种方式（如iframe.src）发送 URL Scheme 请求，之后 Native 拦截到请求并根据 URL SCHEME（包括所带的参数）进行相关操作。</p></blockquote><p><strong>缺点</strong></p><ul><li>使用 iframe.src 发送 URL SCHEME 会有 url 长度的隐患</li><li>创建请求，需要一定的耗时，比注入 API 的方式调用同样的功能，耗时会较长</li></ul><div class="hint-container tip"><p class="hint-container-title">注</p><ul><li>有些方案为了规避 url 长度隐患的缺陷，在 iOS 上采用了使用 Ajax 发送同域请求的方式，并将参数放到 head 或 body 里。这样，虽然规避了 url 长度的隐患，但是 WKWebView 并不支持这样的方式。</li><li>为什么选择 iframe.src 不选择 locaiton.href ？因为如果通过 location.href 连续调用 Native，很容易丢失一些调用。</li></ul></div><h2 id="native-调用-javascript" tabindex="-1"><a class="header-anchor" href="#native-调用-javascript" aria-hidden="true">#</a> Native 调用 JavaScript</h2><blockquote><p>执行拼接 JavaScript 字符串，从外部调用 JavaScript 中的方法，因此 JavaScript 的方法必须在全局的 window 上。</p></blockquote><h2 id="接口实现" tabindex="-1"><a class="header-anchor" href="#接口实现" aria-hidden="true">#</a> 接口实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        callbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        registerFuncs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    window<span class="token punctuation">.</span>JSBridge <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用 Native</span>
        <span class="token function-variable function">invoke</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">bridgeName<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断环境，获取不同的 nativeBridge</span>
            <span class="token keyword">var</span> thisId <span class="token operator">=</span> id <span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 获取唯一 id</span>
            callbacks<span class="token punctuation">[</span>thisId<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">;</span> <span class="token comment">// 存储 Callback</span>
            nativeBridge<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">bridgeName</span><span class="token operator">:</span> bridgeName<span class="token punctuation">,</span>
                <span class="token literal-property property">data</span><span class="token operator">:</span> data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token literal-property property">callbackId</span><span class="token operator">:</span> thisId <span class="token comment">// 传到 Native 端</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">receiveMessage</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> bridgeName <span class="token operator">=</span> msg<span class="token punctuation">.</span>bridgeName<span class="token punctuation">,</span>
                data <span class="token operator">=</span> msg<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                callbackId <span class="token operator">=</span> msg<span class="token punctuation">.</span>callbackId<span class="token punctuation">,</span> <span class="token comment">// Native 将 callbackId 原封不动传回</span>
                responstId <span class="token operator">=</span> msg<span class="token punctuation">.</span>responstId<span class="token punctuation">;</span>
            <span class="token comment">// 具体逻辑</span>
            <span class="token comment">// bridgeName 和 callbackId 不会同时存在</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>callbacks<span class="token punctuation">[</span>callbackId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 找到相应句柄</span>
                    callbacks<span class="token punctuation">[</span>callbackId<span class="token punctuation">]</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行调用</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token function">elseif</span> <span class="token punctuation">(</span><span class="token parameter">bridgeName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>registerFuncs<span class="token punctuation">[</span>bridgeName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 通过 bridgeName 找到句柄</span>
                    <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    registerFuncs<span class="token punctuation">[</span>bridgeName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                            ret <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        nativeBridge<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 回调 Native</span>
                            <span class="token literal-property property">responstId</span><span class="token operator">:</span> responstId<span class="token punctuation">,</span>
                            <span class="token literal-property property">ret</span><span class="token operator">:</span> ret
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">register</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">bridgeName<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registerFuncs<span class="token punctuation">[</span>bridgeName<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
                registerFuncs<span class="token punctuation">[</span>bridgeName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            registerFuncs<span class="token punctuation">[</span>bridgeName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储回调</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),r={href:"https://juejin.cn/post/6844903585268891662",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const a=t("ExternalLinkIcon");return p(),e("div",null,[u,n("p",null,[n("a",r,[c("原文连接"),o(a)])])])}const h=s(l,[["render",k],["__file","index.html.vue"]]);export{h as default};
