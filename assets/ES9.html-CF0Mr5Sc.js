import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as i,c as u,e as r,w as a,a as p,d as s,b as n}from"./app-qSMjXEym.js";const d={},k=p(`<h1 id="es9新增特性" tabindex="-1"><a class="header-anchor" href="#es9新增特性" aria-hidden="true">#</a> ES9新增特性</h1><h2 id="asynchronous-iterators-异步迭代器" tabindex="-1"><a class="header-anchor" href="#asynchronous-iterators-异步迭代器" aria-hidden="true">#</a> asynchronous iterators(异步迭代器)</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">pending</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 直接在循环中await的方式，是每一个独立的Promise的等待</span>
  <span class="token comment">// for (let time of timers) {</span>
  <span class="token comment">//   const t = await time</span>
  <span class="token comment">//   console.log(t)</span>
  <span class="token comment">// }</span>
  <span class="token comment">// 等待timers中每个promise的变化, 再执行循环体内的语句</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> time <span class="token keyword">of</span> timers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可通过Symbol.asyncIterator定义异步迭代的行为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> asyncIterator <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a</span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">yield</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">b</span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">yield</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">c</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> asyncIterator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="object-rest-spread" tabindex="-1"><a class="header-anchor" href="#object-rest-spread" aria-hidden="true">#</a> Object Rest Spread</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>ES6: 添加了对数组的Rest Spread操作符</p></div>`,6),m=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" input "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"a"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'1'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"b"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'2'"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"const"),s(" output "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token operator"},"..."),s("input"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"c"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'3'"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("output"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// {a: '1', b: '2', c: '3'}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" output "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"a"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'1'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"b"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'2'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"c"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'3'"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("other "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(` output

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("other"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// {b: '2', c: '3'}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=p(`<h2 id="promise-prototype-finally" tabindex="-1"><a class="header-anchor" href="#promise-prototype-finally" aria-hidden="true">#</a> Promise.prototype.finally()</h2><blockquote><p>返回一个Promise，在promise执行结束时，无论结果是fulfilled或者是rejected，在执行then()和catch()后，都会执行finally指定的回调函数。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// todo</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// todo</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// todo</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式特性" tabindex="-1"><a class="header-anchor" href="#正则表达式特性" aria-hidden="true">#</a> 正则表达式特性</h2><ul><li>s(dotAll)标志</li><li>正则命名捕获组(RegExp named capture groups)</li><li>正则表达式后行断言(RegExp Lookbehind Assertions)</li><li>正则表达式中的Unicode属性转义(RegExp Unicode Property Escapes)</li></ul><h3 id="s-dotall-标志" tabindex="-1"><a class="header-anchor" href="#s-dotall-标志" aria-hidden="true">#</a> s(dotAll)标志</h3><p>正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外。</p><ol><li>四个字节的UTF-16字符 (通过给正则设置u(unicode)标志解决)</li><li>行终止符 (通过ES9设置doall模式: s标记)</li></ol><ul><li>不识别 <ul><li>U+000A 换行 (<strong>LF</strong>) (<code>\\n</code>)</li><li>U+000D 回车 (<strong>CR</strong>) (<code>\\r</code>)</li><li>U+2028 线分隔符</li><li>U+2029 段落分隔符</li></ul></li><li>识别 <ul><li>U+000B 垂直制表符 (<code>\\v</code>)</li><li>U+000C 换页 (<code>\\f</code>)</li><li>U+0085 下一行</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> spaceUnicode <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;\\u000A&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;\\u000D&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;\\u2028&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;\\u2029&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;\\u000B&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;\\u000C&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;\\u0085&#39;</span>
<span class="token punctuation">]</span>

spaceUnicode<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo.bar</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo.bar</span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// 如何判断当前正则是否使用了 dotAll 模式</span>
<span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo.bar</span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>dotAll<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>flags<span class="token punctuation">)</span> <span class="token comment">// &#39;s&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名捕获组" tabindex="-1"><a class="header-anchor" href="#命名捕获组" aria-hidden="true">#</a> 命名捕获组</h3><p>在一些正则表达式模式中，使用数字进行匹配可能会令人混淆</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// const re = /(\\d{4})-(\\d{2})-(\\d{2})/</span>
<span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token string">&#39;2019-01-01&#39;</span>
<span class="token keyword">const</span> match <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>groups<span class="token punctuation">)</span> <span class="token comment">// {year: &#39;2019&#39;, month: &#39;01&#39;, day: &#39;01&#39;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span><span class="token string">&#39;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 01/01/2019</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lookbehind-后行断言" tabindex="-1"><a class="header-anchor" href="#lookbehind-后行断言" aria-hidden="true">#</a> Lookbehind 后行断言</h3><p>JavaScript 语言的正则表达式，只支持先行断言，不支持后行断言，先行断言我们可以简单理解为&quot;先遇到一个条件，再判断后面是否满足&quot;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello(?=\\sworld)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;hello&quot;, index: 0, input: &quot;hello world&quot;, groups: undefined]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但有时我们想判断前面是 world 的 hello，这个代码是实现不了的。在 ES9 就支持这个后行断言了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// (?&lt;…)是后行断言的符号，(?..)是先行断言的符号，然后结合 =(等于)、!(不等)、\\1(捕获匹配)。</span>
<span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">&#39;world hello&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=world\\s)hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;hello&quot;, index: 6, input: &quot;world hello&quot;, groups: undefined]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unicode属性转义" tabindex="-1"><a class="header-anchor" href="#unicode属性转义" aria-hidden="true">#</a> Unicode属性转义</h3><p>允许正则表达式匹配符合Unicode某种属性的所有字符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;㉛&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{Number}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&#39;🤣&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{Emoji}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\P{Emoji}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function b(h,x){const o=l("CodeTabs");return i(),u("div",null,[k,r(o,{id:"21",data:[{id:"Spread"},{id:"Rest"}]},{title0:a(({value:e,isActive:t})=>[s("Spread")]),title1:a(({value:e,isActive:t})=>[s("Rest")]),tab0:a(({value:e,isActive:t})=>[m]),tab1:a(({value:e,isActive:t})=>[v]),_:1}),g])}const w=c(d,[["render",b],["__file","ES9.html.vue"]]);export{w as default};
