import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c,a as d}from"./app-qSMjXEym.js";const l={},i=d('<h1 id="字体加载" tabindex="-1"><a class="header-anchor" href="#字体加载" aria-hidden="true">#</a> 字体加载</h1><h2 id="格式" tabindex="-1"><a class="header-anchor" href="#格式" aria-hidden="true">#</a> 格式</h2><p>常见的字体格式有<code>TTF(TrueType Font)</code>、<code>OTF(OpenType Font)</code>、<code>EOT(Embedded Open Type)</code>、<code>WOFF(Web Open Font Format)</code>和<code>WOFF2</code>。</p><p><strong>WOFF</strong></p><p>该格式完全是为了 Web 而创建，由 Mozilla 基金会、微软和 Opera 软件公司合作推出。 WOFF 字体均经过 WOFF 的编码工具压缩，文件大小一般比 TTF 小 40%，加载速度更快，可以更好的嵌入网页中。</p><p><strong>WOFF2</strong></p><p>WOFF2 是 WOFF 的下一代。 WOFF2 格式在原有的基础上提升了 30% 的压缩率。</p><blockquote><p>使用<code>WOFF2</code>字体格式文件提高字体加载速度 =&gt; 减小对应字体文件体积 =&gt; 压缩</p></blockquote><h2 id="控制" tabindex="-1"><a class="header-anchor" href="#控制" aria-hidden="true">#</a> 控制</h2><p>浏览器加载 Web Fonts 时按顺序会有三个时期：</p><ol><li><p>阻塞期（Block Period）。在此期间如果字体没有加载完成，那么浏览器会使用 font-family 指定的字体列表中的后备字体（Fallback）进行渲染，但是显示为空白，也就是对于用户是不可见的。在此期间字体加载完成之后才能正常显示该字体</p></li><li><p>交换期（Swap Period）。跟阻塞期类似，但是在这个时期内，它会在字体加载时，先用后备字体渲染文本并显示出来（而不是显示空白），在此期间字体加载完成之后才能正常的显示该字体。</p></li><li><p>失败期（Failure Period）。如果字体加载失败，则使用后备字体显示文本。</p></li></ol><blockquote><p>各个时期的长短根据<code>font-display</code>属性值确定</p></blockquote><ol><li>auto：这个是 font-display 的默认值，字体的加载过程由浏览器自行决定，不过基本上和取值为 block 时的处理方式一致。</li><li>block：在字体加载前，会使用备用字体渲染，但是显示为空白，使得它一直处于阻塞期，当字体加载完成之后，进入交换期，用下载下来的字体进行文本渲染。不过有些浏览器并不会无限的处于阻塞期，会有超时限制，一般在3秒后，如果阻塞期仍然没有加载完字体，那么直接就进入交换期，显示后备字体（而非空白），等字体下载完成之后直接替换。</li><li>swap：基本上没有阻塞期，直接进入交换期，使用后备字体渲染文本，等用到的字体加载完成之后替换掉后备字体。</li><li>fallback：阻塞期很短（大约100毫秒），也就是说会有大约100毫秒的显示空白的后备字体，然后交换期也有时限（大约3秒），在这段时间内如果字体加载成功了就会替换成该字体，如果没有加载成功那么后续会一直使用后备字体渲染文本。</li><li>optional：与 fallback 的阻塞期一致，但是没有交换期，如果在阻塞期的100毫秒内字体加载完成，那么会使用该字体，否则直接使用后备字体。这个就是说指定的网络字体是可有可无的，如果加载很快那么可以显示，加载稍微慢一点就不会显示了，适合网络情况不好的时候，例如移动网络。</li></ol><blockquote><p>使用<code>font-display</code>对加载字体的行为进行调整 =&gt; 视觉体验和渲染 =&gt; 控制</p></blockquote><ul><li>CSS 字体加载 API</li><li>webfontloader.js</li></ul><h2 id="内容" tabindex="-1"><a class="header-anchor" href="#内容" aria-hidden="true">#</a> 内容</h2><p><strong>提取</strong></p><p>从文件字体中提取出仅在页面使用到的部分，合成新的字体文件，答复提高压缩效率</p><ul><li><code>font-spider</code></li><li><code>fontmin</code></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>优点：根据字体使用情况带来的压缩率高 缺点：内容如果频繁变动，需要重新构建，带来的维护成本高</p></div><p><strong>切片</strong></p><p>使用<code>@font-face</code>多次定义相同字体，搭配<code>unicode-range</code>属性划分区间指向不同资源地址</p><p><strong>unicode-range</strong></p><ul><li>单个码点： <code>U+26</code> (或 <code>u+26</code> )</li><li>码点范围： <code>U+0-7F</code>, <code>U+0025-00FF</code></li><li>通配符范围： <code>U+4??</code> , (<code>U+400-U+4FF</code>)</li><li>逗号分隔的多个值： <code>U+0025-00FF</code>, <code>U+4??</code></li></ul>',24),t=[i];function a(n,p){return o(),c("div",null,t)}const F=e(l,[["render",a],["__file","字体加载.html.vue"]]);export{F as default};
