import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as t}from"./app-qSMjXEym.js";const p={},e=t(`<h1 id="深层获取对象属性值" tabindex="-1"><a class="header-anchor" href="#深层获取对象属性值" aria-hidden="true">#</a> 深层获取对象属性值</h1><p>实现一个深层对象属性访问</p><p>可以通过<code>fn(data, &#39;a/b/c&#39;)</code> 获取到<code>data.a.b.c</code>的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// while循环</span>
<span class="token keyword">function</span> <span class="token function">getDeepVal</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> struct<span class="token punctuation">,</span> symbol <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>struct<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">[</span>struct<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> structList <span class="token operator">=</span> struct<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>target <span class="token operator">&amp;&amp;</span> structList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> structList<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    target <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> target
<span class="token punctuation">}</span>
<span class="token comment">// 递归</span>
<span class="token keyword">function</span> <span class="token function">getDeepVal</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> struct<span class="token punctuation">,</span> symbol <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>struct<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">[</span>struct<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> structList <span class="token operator">=</span> struct<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>
  <span class="token keyword">const</span> key <span class="token operator">=</span> structList<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  target <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token keyword">return</span> <span class="token function">getDeepVal</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> structList<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),c=[e];function o(i,u){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","CD-02.html.vue"]]);export{k as default};
