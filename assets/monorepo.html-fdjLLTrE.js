import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as l,a as r}from"./app-qSMjXEym.js";const a={},o=r('<h1 id="monorepo" tabindex="-1"><a class="header-anchor" href="#monorepo" aria-hidden="true">#</a> monorepo</h1><p>Monorepo的意思是在版本控制系统的单个代码库里包含了许多项目的代码。这些项目虽然有可能是相关的，但通常在逻辑上是独立的，并由不同的团队维护。</p><ul><li>单一代码库（monorepos）</li><li>多代码库（multirepos）</li></ul><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h2><ul><li>可见性（Visibility）：每个人都可以看到其他人的代码，这样可以带来更好的协作和跨团队贡献——不同团队的开发人员都可以修复代码中的bug，而你甚至都不知道这个bug的存在。</li><li>更简单的依赖关系管理（Simpler dependency management）：共享依赖关系很简单，因为所有模块都托管在同一个存储库中，因此都不需要包管理器。</li><li>唯一依赖源（Single source of truth）：每个依赖只有一个版本，意味着没有版本冲突，没有依赖地狱。</li><li>一致性（Consistency）：当你把所有代码库放在一个地方时，执行代码质量标准和统一的风格会更容易。</li><li>共享时间线（Shared timeline）：API或共享库的变更会立即被暴露出来，迫使不同团队提前沟通合作，每个人都得努力跟上变化。</li><li>原子提交（Atomic commits）：原子提交使大规模重构更容易，开发人员可以在一次提交中更新多个包或项目。</li><li>隐式CI（Implicit CI）：因为所有代码已经统一维护在一个地方，因此可以保证持续集成。</li><li>统一的CI/CD（Unified CI/CD）：可以为代码库中的每个项目使用相同的CI/CD部署流程。</li><li>统一的构建流程（Unified build process）：代码库中的每个应用程序可以共享一致的构建流程。</li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><ul><li>性能差（Bad performance）：单一代码库难以扩大规模，像git blame这样的命令可能会不合理的花费很长时间执行，IDE也开始变得缓慢，生产力受到影响，对每个提交测试整个repo变得不可行。</li><li>破坏主线（Broken main/master）：主线损坏会影响到在单一代码库中工作的每个人，这既可以被看作是灾难，也可以看作是保证测试既可以保持简洁又可以跟上开发的好机会。</li><li>学习曲线（Learning curve）：如果代码库包含了许多紧密耦合的项目，那么新成员的学习曲线会更陡峭。</li><li>大量的数据（Large volumes of data）：单一代码库每天都要处理大量的数据和提交。</li><li>所有权（Ownership）：维护文件的所有权更有挑战性，因为像Git或Mercurial这样的系统没有内置的目录权限。</li><li>Code reviews：通知可能会变得非常嘈杂。例如，GitHub有有限的通知设置，不适合大量的pull request和code review。</li></ul><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ul><li>定义一个便于探索的统一的目录组织。</li><li>维护分支整洁，保持较小的分支，考虑采用基于主干的开发。</li><li>为每个项目使用固定的依赖项，一次升级所有依赖项，迫使每个项目都跟上依赖项。只为真正的例外情况保留例外。</li><li>如果正在使用Git，学习如何使用shallow clone和filter-branch来处理大容量代码库。</li><li>货比三家，寻找像Bazel或Buck这样的智能构建系统，以加速构建和测试。</li><li>如果需要限制对某些项目的访问，请使用CODEOWERS。</li><li>使用Semaphore等CI/CD云平台来大规模测试和部署应用程序。</li></ul>',9),n=[o];function t(c,d){return e(),l("div",null,n)}const u=i(a,[["render",t],["__file","monorepo.html.vue"]]);export{u as default};
