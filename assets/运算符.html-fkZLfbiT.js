import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e}from"./app-qSMjXEym.js";const t={},p=e(`<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h1><h2 id="短路运算符" tabindex="-1"><a class="header-anchor" href="#短路运算符" aria-hidden="true">#</a> 短路运算符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span>
  <span class="token function">say</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> o<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">&#39;jerry&#39;</span>
<span class="token comment">// 并</span>
o<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指数运算符" tabindex="-1"><a class="header-anchor" href="#指数运算符" aria-hidden="true">#</a> 指数运算符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES7 中引入指数运算符「 ** 」，用来实现幂运算，功能与 Math.pow 结果相同</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 1024 Math.pow(2, 10)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逻辑赋值操作符" tabindex="-1"><a class="header-anchor" href="#逻辑赋值操作符" aria-hidden="true">#</a> 逻辑赋值操作符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token comment">// 判断默认值时区分左边的false值</span>
<span class="token comment">// 例如o.selfCount = o.count ?? 10 =&gt; o.count为0值等一样会取到10</span>
<span class="token comment">// includes null, undefined, not other empty value</span>
<span class="token comment">// o.selfCount = o.selfCount ?? 10</span>
o<span class="token punctuation">.</span>selfCount <span class="token operator">=</span> o<span class="token punctuation">.</span>count <span class="token operator">??</span> <span class="token number">10</span>
<span class="token comment">// o.name = o.name || &#39;jerry&#39;</span>
o<span class="token punctuation">.</span>name <span class="token operator">||=</span> <span class="token string">&#39;jerry&#39;</span>
<span class="token comment">// o.count = o.count &amp;&amp; 10</span>
o<span class="token punctuation">.</span>count <span class="token operator">&amp;&amp;=</span> <span class="token number">10</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;tom&#39;, count: 10}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spread-rest" tabindex="-1"><a class="header-anchor" href="#spread-rest" aria-hidden="true">#</a> Spread &amp; Rest</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// spread 解构</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span>
<span class="token comment">// rest 扩展</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>c <span class="token punctuation">]</span> <span class="token operator">=</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可选链操作符" tabindex="-1"><a class="header-anchor" href="#可选链操作符" aria-hidden="true">#</a> 可选链操作符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在对象层级较深时，不用做层级判断的简便写法</span>
<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token operator">?.</span>name<span class="token operator">?.</span>say<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","运算符.html.vue"]]);export{d as default};
