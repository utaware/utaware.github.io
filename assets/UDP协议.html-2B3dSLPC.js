import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as a,a as t}from"./app-qSMjXEym.js";const o={},n=t('<h1 id="udp协议" tabindex="-1"><a class="header-anchor" href="#udp协议" aria-hidden="true">#</a> UDP协议</h1><p>用户数据报协议（英语：User Datagram Protocol，缩写：UDP；又称用户数据包协议）是一个简单的面向数据包的通信协议，位于OSI模型的传输层。该协议由 David P. Reed 在1980年设计且在 RFC 768 中被规范。</p><p>在 TCP/IP 模型中，UDP 为网络层以上和应用层以下提供了一个简单的接口。UDP 只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以 UDP 有时候也被认为是不可靠的数据包协议）。UDP 在 IP 数据包的头部仅仅加入了端口、数据长度和数据校验字段。</p><p>UDP 适用于不需要或在程序中执行错误检查和纠正的应用，它避免了协议栈中此类处理的开销。对时间有较高要求的应用程序通常使用 UDP，因为丢弃数据包比等待或重传导致延迟更可取。</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><blockquote><p>简单，轻量</p></blockquote><ul><li>TCP头部20字节，UDP头部仅8字节</li><li>没有建立连接带来的时延</li><li>不维护连接状态</li><li>无拥塞控制</li></ul><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><p><strong>QUIC</strong></p><p>QUIC（全称 Quick UDP Internet Connections，快速 UDP 互联网连接）是 Google 提出的一种基于 UDP 改进的通信协议，其目的是降低网络通信的延迟，提供更好的用户互动体验。QUIC 在应用层上，会自己实现快速连接建立、减少重传时延，自适应拥塞控制。</p><p><strong>流媒体</strong></p><p>直播协议多使用 RTMP，是基于 TCP 的，当网络不好的时候，TCP 协议会主动降低发送速度，这对本来当时就卡的看视频来讲是要命的，应该应用层马上重传，而不是主动让步。因而，很多直播应用，都基于 UDP 实现了自己的视频传输协议。</p><p><strong>实时游戏</strong></p><p>射击、MOBA等竞技类游戏，对实时要求较为严格的情况下，采用自定义的可靠 UDP 协议，自定义重传策略，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成的影响。</p><p><strong>IoT 物联网</strong></p><p>一方面，物联网领域终端资源少，很可能只是个内存非常小的嵌入式系统，而维护 TCP 协议代价太大；另一方面，物联网对实时性要求也很高，而 TCP 还是因为上面的那些原因导致时延大。</p><h2 id="可靠性保障机制" tabindex="-1"><a class="header-anchor" href="#可靠性保障机制" aria-hidden="true">#</a> 可靠性保障机制</h2><p>前面提到 UDP 协议本身不提供数据一定到达的可靠性，那么如何在应用层自己来保障呢？目前主要有两种机制，一个是 ACK（消息确认），另一个是 FEC（前置纠错）。</p><p><strong>ACK</strong></p><p>类似 TCP的消息确认和超时重传，当对端收到消息时返回对该消息的确认包，如果发送端等待确认包超时，就会重新发送该消息。</p><p><strong>FEC</strong></p><p>实现 FEC算法，以生成冗余数据包，以便即使数据包存在部分丢失，也可以将部分数据恢复回来</p>',22),p=[n];function i(s,d){return r(),a("div",null,p)}const P=e(o,[["render",i],["__file","UDP协议.html.vue"]]);export{P as default};
