import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e}from"./app-qSMjXEym.js";const t={},p=e(`<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><h2 id="def" tabindex="-1"><a class="header-anchor" href="#def" aria-hidden="true">#</a> def</h2><p><strong>语法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">function_name</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Function documentation string.
    &quot;&quot;&quot;</span>
    <span class="token comment"># Function body goes here.</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 可变参数</span>
<span class="token keyword">def</span> <span class="token function">js_join</span><span class="token punctuation">(</span><span class="token operator">*</span>nums<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>js_join<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">print_dict</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>

<span class="token comment"># 关键字参数</span>
print_dict<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token string">&#39;18&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><h2 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> lambda</h2><p><strong>语法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">lambda</span> arguments ：expression
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>lambda: 关键字</li><li>arguments: 参数(逗号分隔)</li><li>expression：表达式(描述返回值)</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>冒号使用: 不是用来开始新的语句块的，而是用来分隔参数和表达式</li><li>参数格式: 可以接收任意多个参数，包括可选参数，参数列表不需要用括号</li><li>返回值: 返回单个表达式的值，不需要使用return关键字，最后一个表达式的值即为返回值</li><li>表达式数量: 只能包含一个表达式，不能包含命令</li><li>单行函数: 通常写在一行上，因此有时被称为单行函数</li><li>程序运行效率: 并不会带来程序运行效率的提高，主要用于代码简洁性</li><li>命名空间: 有自己的命名空间，不能访问参数列表之外或全局命名空间中的参数</li><li>可读性：考虑可读性，应该避免嵌套lambda函数</li></ul></div>`,12),i=[p];function o(l,c){return s(),a("div",null,i)}const d=n(t,[["render",o],["__file","函数.html.vue"]]);export{d as default};
