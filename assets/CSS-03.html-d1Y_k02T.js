import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as e,a as o}from"./app-qSMjXEym.js";const a={},t=o('<h1 id="bfc" tabindex="-1"><a class="header-anchor" href="#bfc" aria-hidden="true">#</a> BFC</h1><blockquote><p>全称：Block Formatting Context，即块级格式化上下文。决定了元素如何对其内容进行定位，以及与其它元素的关系和相互作用，当涉及到可视化布局时，BFC提供了一个环境，HTML在这个环境中按照一定的规则进行布局。</p></blockquote><ul><li>css2.1: BFC、IFC</li><li>css3: GFC、FFC</li></ul><p>BFC是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h2><ul><li>BFC 是页面上的一个独立容器，容器里面的子元素不会影响外面的元素。</li><li>BFC 内部的块级盒会在垂直方向上一个接一个排列</li><li>同一 BFC 下的相邻块级元素可能发生外边距折叠，创建新的 BFC 可以避免外边距折叠</li><li>每个元素的外边距盒（<code>margin box</code>）的左边与包含块边框盒（<code>border box</code>）的左边相接触（从右向左的格式的话，则相反），即使存在浮动</li><li>浮动盒的区域不会和 BFC 重叠</li><li>计算 BFC 的高度时，浮动元素也会参与计算</li></ul><h2 id="触发" tabindex="-1"><a class="header-anchor" href="#触发" aria-hidden="true">#</a> 触发</h2><ul><li><strong>浮动</strong>：float:left | float:right;【会导致父元素的宽度丢失,也会导致下边的元素上移】</li><li><strong>定位</strong>：position:absolute | position:fixed;</li><li><strong>display的一些值</strong>：display:inline-block【转为行内块会导致宽度丢失】 | display:flex | display:table | table-cell、table-caption、inline-table、inline-flex、grid、inline-grid;</li><li><strong>overflow值不为visible</strong>：overflow:hidden;【将会剪切掉溢出的元素】 | overflow:auto、overflow:scroll;</li><li><strong>display:flow-root</strong>【新属性，BFC创建新方式，没有任何副作用，注意浏览器兼容】</li></ul><h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h2><ol><li>父元素高度塌陷</li><li>浮动文字环绕</li><li>外边距重叠</li><li>两栏布局</li></ol>',10),r=[t];function n(s,d){return i(),e("div",null,r)}const f=l(a,[["render",n],["__file","CSS-03.html.vue"]]);export{f as default};
