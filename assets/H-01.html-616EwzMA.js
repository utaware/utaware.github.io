import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as t}from"./app-qSMjXEym.js";const p={},o=t(`<h1 id="h5-history-api" tabindex="-1"><a class="header-anchor" href="#h5-history-api" aria-hidden="true">#</a> H5 History API</h1><blockquote><p>在 H5 之前，即使采用的是脚本语言的方式，只要浏览器地址栏中的 URL 地址被切换，都会触发一个页面刷新的过程，这个过程将耗费一些时间与资源。在很多时候，尤其是两个大部分内容相同的页面之间进行切换时，这个过程往往被视为一种浪费。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ScrollRestoration</span> <span class="token operator">=</span> <span class="token string">&quot;auto&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;manual&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  scrollRestoration<span class="token operator">:</span> ScrollRestoration<span class="token punctuation">;</span>
  <span class="token keyword">readonly</span> state<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">pushState</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> unused<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> url<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token constant">URL</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">replaceState</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> unused<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> url<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token constant">URL</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><ul><li>length: 代表了会话历史中元素的数目，包括了当前的加载页</li><li>scrollRestoration: 允许web应用程序在历史导航上显式地设置默认滚动恢复行动</li><li>state: 浏览器在当前的url下面给出的一个状态信息</li></ul><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><ul><li>go</li></ul><blockquote><p>通过当前页面的相对位置从浏览历史中加载页面，当参数超出了界限或者没有参数传入或者不是整数的时候没有效果也不会报错</p></blockquote><ul><li>back</li></ul><blockquote><p>前往上一页，可以点击浏览器的左上角的返回按钮模拟这个方法，相当于go(-1)</p></blockquote><ul><li>forward</li></ul><blockquote><p>前往下一页，可以点击浏览器的左上角的前进按钮模拟这个方法，相当于go(-1)</p></blockquote><ul><li>pushState</li></ul><blockquote><p>新生成一条历史记录，方便用浏览器的“后退”和“前进”来导航</p></blockquote><ul><li>replaceState</li></ul><blockquote><p>不会新生成历史记录，而是将当前历史记录替换掉</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">pushState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">replaceState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
<span class="token comment">// state: 是一个 JavaScript 对象，与pushState()创建的新历史记录条目相关联。(2M限制)</span>
<span class="token comment">// title: 是一个字符串，目前各类浏览器都会忽略它（以后才有可能启用，用作页面标题），所以设置成什么都没关系。目前建议设置为空字符串。</span>
<span class="token comment">// url: 一般会是简单的?page=2这样的参数风格的相对路径，它会自动以当前URL为基准。需要注意的是，本参数URL需要和当前页面URL同源，否则会抛出错误。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="window-onpopstate" tabindex="-1"><a class="header-anchor" href="#window-onpopstate" aria-hidden="true">#</a> window.onpopstate</h2><blockquote><p>每当激活同一文档中不同的历史记录条目时，popstate 事件就会在对应的 window 对象上触发。如果当前处于激活状态的历史记录条目是由 history.pushState() 方法创建的或者是由 history.replaceState() 方法修改的，则 popstate 事件的 state 属性包含了这个历史记录条目的 state 对象的一个拷贝。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onpopstate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;location: &quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>location <span class="token operator">+</span> <span class="token string">&quot;, state: &quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;title 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;?page=1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;title 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;?page=2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;title 3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;?page=3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出 &quot;location: http://example.com/example.html?page=1, state: {&quot;page&quot;:1}&quot;</span>
history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出 &quot;location: http://example.com/example.html, state: null</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 弹出 &quot;location: http://example.com/example.html?page=3, state: {&quot;page&quot;:3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","H-01.html.vue"]]);export{k as default};
