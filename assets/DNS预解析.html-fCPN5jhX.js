import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c,b as a,d as n,e as l,a as s}from"./app-qSMjXEym.js";const u={},i=s(`<h1 id="dns预解析" tabindex="-1"><a class="header-anchor" href="#dns预解析" aria-hidden="true">#</a> DNS预解析</h1><blockquote><p>dns-prefetch(DNS预获取)是前端网络性能优化的一种措施。它根据浏览器定义的规则，提前解析之后可能会用到的域名，使解析结果缓存到系统缓存中，缩短DNS解析时间，进而提高网站的访问速度。</p></blockquote><p>每当浏览器从（第三方）服务器发送一次请求时，都要先通过DNS解析将该跨域域名解析为 IP地址，然后浏览器才能发出请求。 如果某一时间内，有多个请求都发送给同一个服务器，那么DNS解析会多次并且重复触发。这样会导致整体的网页加载有延迟的情况。 我们知道，虽然DNS解析占用不了多大带宽，但是它会产生很高的延迟，尤其是对于移动网络会更为明显。</p><p>因此，为了减少DNS解析产生的延迟，我们可以通过dns-prefetch预解析技术有效地缩短DNS解析时间。</p><p>DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 后面</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x-dns-prefetch-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>on<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//a.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//b.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//c.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>用meta信息来告知浏览器, 当前页面要做DNS预解析</li><li>在页面header中使用link标签来强制对DNS预解析:</li></ol><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>当浏览器访问一个域名的时候，需要解析一次DNS，获得对应域名的ip地址。</p><ul><li>浏览器缓存</li><li>系统缓存</li><li>路由器缓存</li><li>ISP(运营商)DNS缓存</li><li>根域名服务器</li><li>顶级域名服务器</li><li>主域名服务器</li></ul><p>按照以上顺序逐步读取缓存，直到拿到IP地址。</p><p><code>dns-prefetch</code>就是在将解析后的IP缓存在系统中。</p><p>这样，dns-prefetch就有效地缩短了DNS解析时间。因为，在本地操作系统做了DNS缓存，使得DNS在解析的过程中，提前在系统缓存中找到了对应IP。</p><p>这样一来， 后续的解析步骤就不用执行了，进而也就缩短了DNS解析时间。</p><p>假如浏览器首次将一个域名解析为IP地址，并缓存至操作系统，那么下一次DNS解析时间可以低至0-1ms。</p><p>倘若结果不缓存在系统，那么就需要读取路由器的缓存，进而后续的解析时间最小也要约15ms。</p><p>如果路由器缓存也不存在，则需要读取ISP（运营商）DNS缓存，一般像taobao.com、baidu.com这些常见的域名，读取ISP（运营商）DNS缓存需要的时间在80-120ms，如果是不常见的域名，平均需要200-300ms。</p><p>一般来说，大部分的网站到运营商这块都能找到IP。</p><p>那也就是说，dns-prefetch可以给DNS解析过程带来15-300ms的提升，尤其是一些大量引用很多其他域名资源的网站，提升效果就更加明显了</p><h2 id="浏览器dns缓存" tabindex="-1"><a class="header-anchor" href="#浏览器dns缓存" aria-hidden="true">#</a> 浏览器DNS缓存</h2><p>现代浏览器为了优化DNS解析，也设有了浏览器DNS缓存。</p><p>每当在首次DNS解析后会对其IP进行缓存。至于缓存时长，每种浏览器都不一样，比如Chrome的过期时间是1分钟，在这个期限内不会重新请求DNS。</p><p>而dns-prefetch 相当于在浏览器缓存之后，在本地操作系统中做了DNS缓存，一般来说，DNS在系统的缓存时间是大于浏览器的。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>每当Chrome浏览器启动的时候，就会自动的快速解析浏览器最近一次启动时记录的前10个域名。所以经常访问的网址就不存在DNS解析的延迟，进而打开速度更快。</p><p>TTL(Time-To-Live)，就是一条域名解析记录在DNS服务器中的存留时间</p></div><ul><li><p><strong>浏览器DNS缓存的时间跟DNS服务器返回的TTL值无关</strong>, 它的缓存时间取决于浏览器自身设置。</p></li><li><p><strong>系统缓存会参考DNS服务器响应的TTL值，但是不完全等于TTL值</strong>。</p></li></ul><p>国内和国际上很多平台的TTL值都是以秒为单位的，很多的默认值都是3600，也就是默认缓存1小时。</p><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><blockquote><p>过多的预获取会导致过量的DNS解析，对网络是一种负担。</p></blockquote><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2>`,29),r=a("li",null,[a("code",null,"dns-prefetch"),n(" 仅对跨域域上的 DNS查找有效，因此请避免使用它来指向相同域。这是因为，到浏览器看到提示时，您站点域背后的IP已经被解析。")],-1),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link",target:"_blank",rel:"noopener noreferrer"},k=a("li",null,"考虑将 dns-prefetch 与 preconnect(预连接)提示配对。",-1),h=s(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- preconnect 提示最好仅用于最关键的连接 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.gstatic.com/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.gstatic.com/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function m(q,v){const t=p("ExternalLinkIcon");return o(),c("div",null,[i,a("ol",null,[r,a("li",null,[n("除了link 还可以通过使用"),a("a",d,[n("HTTP链接"),l(t)]),n("字段将 dns-prefetch（以及其他资源提示）指定为 HTTP标头：")]),k]),h])}const f=e(u,[["render",m],["__file","DNS预解析.html.vue"]]);export{f as default};
