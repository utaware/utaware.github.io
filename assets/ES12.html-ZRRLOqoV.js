import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e}from"./app-qSMjXEym.js";const t={},p=e(`<h1 id="es12新增特性" tabindex="-1"><a class="header-anchor" href="#es12新增特性" aria-hidden="true">#</a> ES12新增特性</h1><h2 id="string-replaceall" tabindex="-1"><a class="header-anchor" href="#string-replaceall" aria-hidden="true">#</a> String replaceAll</h2><p>replaceAll方法的工作方式与replace完全相同，但作用于字符串中的所有出现的pattern，而不仅仅是第一个</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
 <span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">// &#39;he++o wor+d&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="promise-any" tabindex="-1"><a class="header-anchor" href="#promise-any" aria-hidden="true">#</a> Promise any</h2><p>promise.any()方法接受一组promise，返回新的promise来响应第一个成功完成的promise。</p><ul><li>all-resolve -&gt; then: first resolve promise</li><li>resolve &amp; reject -&gt; then: first resolve promise</li><li>all-reject -&gt; catch: AggregateError: All promises were rejected</li></ul><p><strong>AggregateError</strong></p><p>一种特殊的错误子类，将许多错误组合成一个汇总对象</p><h2 id="逻辑赋值运算符-logical-assignment-operators" tabindex="-1"><a class="header-anchor" href="#逻辑赋值运算符-logical-assignment-operators" aria-hidden="true">#</a> 逻辑赋值运算符(Logical Assignment Operators)</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> a5 <span class="token operator">=</span> <span class="token number">0</span>

a3 <span class="token operator">??=</span> <span class="token number">3</span> <span class="token comment">// a3 ?? a3 = 10 // 0</span>
a4 <span class="token operator">&amp;&amp;=</span> <span class="token number">4</span> <span class="token comment">// a4 &amp;&amp; a4 = 4 // 4</span>
a5 <span class="token operator">||=</span> <span class="token number">5</span> <span class="token comment">// a5 || a5 = 5 // 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数字分隔符-numeric-separators" tabindex="-1"><a class="header-anchor" href="#数字分隔符-numeric-separators" aria-hidden="true">#</a> 数字分隔符(Numeric Separators)</h2><p>在数字之间创建视觉分隔来使数字更具可读性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> price1 <span class="token operator">=</span> <span class="token number">1_000_000_000</span>
<span class="token keyword">const</span> price2 <span class="token operator">=</span> <span class="token number">1000000000</span>
price1 <span class="token operator">===</span> price2 <span class="token comment">// true</span>
<span class="token keyword">const</span> float1 <span class="token operator">=</span> <span class="token number">0.000_001</span>
<span class="token keyword">const</span> float2 <span class="token operator">=</span> <span class="token number">0.000001</span>
float1 <span class="token operator">===</span> float2 <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="弱引用-weakref" tabindex="-1"><a class="header-anchor" href="#弱引用-weakref" aria-hidden="true">#</a> 弱引用(WeakRef)</h2><p>用于引用目标对象，而不会将其从垃圾回收器中拿出。弱引用对象的一大用处，就是作为缓存，未被清除时可以从缓存取值，一旦清除缓存就自动失效。WeakRef实例对象有一个deref()方法，如果原始对象存在，该方法返回原始对象；如果原始对象已经被垃圾回收机制清除，该方法返回undefined。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 当new出Counter实例后, ref成为了对于element的引用</span>
<span class="token comment">// 如果element某刻已经移除, 但因为引用还被ref或其他保持并不能被GC回收</span>
<span class="token comment">// 而如果是弱引用, 即便已经还存在的引用关系, 也是可以被GC回收的</span>
<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>

  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tick<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">tick</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>count
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">stop</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">clear</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="清理器注册表功能-finalizationregistry" tabindex="-1"><a class="header-anchor" href="#清理器注册表功能-finalizationregistry" aria-hidden="true">#</a> 清理器注册表功能(FinalizationRegistry)</h2><p>用来指定目标对象被垃圾回收机制清除以后，所要执行的回调函数</p><p>由于无法知道清理器何时会执行，所以最好避免使用它。另外，如果浏览器窗口关闭或者进程意外退出，清理器则不会运行。</p>`,20),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","ES12.html.vue"]]);export{d as default};
