import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,a as t}from"./app-qSMjXEym.js";const e={},p=t(`<h1 id="link标签资源预加载" tabindex="-1"><a class="header-anchor" href="#link标签资源预加载" aria-hidden="true">#</a> link标签资源预加载</h1><h2 id="preload" tabindex="-1"><a class="header-anchor" href="#preload" aria-hidden="true">#</a> preload</h2><p><code>&lt;link&gt;</code> 元素的 <code>rel</code> 属性的 <code>preload</code> 值允许在 <code>HTML</code> 的 <code>&lt;head&gt;</code> 中声明获取请求，指定页面很快就需要的资源，这些资源是希望在页面生命周期的早期就开始加载的，早于浏览器的主要渲染机制启动。这可以确保它们更早可用，并且不太可能阻塞页面的渲染，从而提高性能。尽管名称中包含“load”一词，但它并不加载和执行脚本，而只是安排脚本以更高的优先级进行下载和缓存。</p><p><strong>示例</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 需加载跨域的资源列表，需要正确设置CORS --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 预加载font和fetch资源需要设置crossorigin属性 --&gt;</span>
<span class="token comment">&lt;!-- 即使获取请求不跨域也需要设置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fonts/cicle_fina-webfont.woff2<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font/woff2<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">crossorigin</span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 字体文件必须使用匿名模式的CORS进行获取 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="as" tabindex="-1"><a class="header-anchor" href="#as" aria-hidden="true">#</a> as</h3><ul><li>audio：音频文件，通常在 <code>&lt;audio&gt;</code> 中使用。</li><li>document：用于嵌入在 <code>&lt;frame&gt;</code> 或 <code>&lt;iframe</code>&gt; 中的 HTML 文档。</li><li>embed：用于嵌入在 <code>&lt;embed&gt;</code> 元素中的资源。</li><li>fetch：通过 <code>fetch</code> 或 <code>XHR</code> 请求访问的资源，例如 <code>ArrayBuffer</code>、<code>WebAssembly</code> 二进制文件或 JSON 文件。</li><li>font：字体文件。</li><li>image：图像文件。</li><li>object：要嵌入在 <code>&lt;object&gt;</code> 元素中的资源。</li><li>script：JavaScript 文件。</li><li>style：CSS 样式表。</li><li>track：WebVTT 文件。</li><li>worker：JavaScript web worker 或 shared worker。</li><li>video：视频文件，通常在 <code>&lt;video&gt;</code> 中使用。</li></ul><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h3><p><code>&lt;link&gt;</code> 元素可以接受一个 type 属性，其中包含元素指向的资源的 MIME。类型浏览器将使用type属性的值来确定是否支持该资源，如果不支持，则会忽略它，仅在支持时才会下载它。</p><h3 id="media" tabindex="-1"><a class="header-anchor" href="#media" aria-hidden="true">#</a> media</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-image-narrow.png<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(max-width: 600px)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-image-wide.png<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(min-width: 601px)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="modulepreload" tabindex="-1"><a class="header-anchor" href="#modulepreload" aria-hidden="true">#</a> modulepreload</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 提前加载js模块</span>
<span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;modulepreload &quot;</span> href<span class="token operator">=</span><span class="token string">&quot;main.js&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prefetch" tabindex="-1"><a class="header-anchor" href="#prefetch" aria-hidden="true">#</a> prefetch</h2><p>利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中，浏览器会给prefetch的资源比preload的资源更低的优先级(当前页优先)，当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- link标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/images/big.jpeg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- HTTP Link: header --&gt;</span>
Link: &lt;/images/big.jpeg&gt;; rel=prefetch
<span class="token comment">&lt;!-- meta标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Link<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;/images/big.jpeg&gt;; rel=prefetch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 区分预取请求 --&gt;</span>
X-moz: prefetch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="preconnect" tabindex="-1"><a class="header-anchor" href="#preconnect" aria-hidden="true">#</a> preconnect</h2><blockquote><p>与 DNS 预解析类似，Preconnect 不仅完成 DNS 预解析，同时还将进行 TCP 握手和建立传输层协议</p></blockquote><ul><li>http: DNS 解析 + TCP 三次握手</li><li>https: DNS 解析 + TCP 三次握手 + TLS/SSL 握手</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://example.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="prerender" tabindex="-1"><a class="header-anchor" href="#prerender" aria-hidden="true">#</a> prerender</h2><p>prerender 会收集用户接下来要访问的页面，并且在浏览器中创建一个隐藏 Tab，并且在隐藏 Tab 中提前加载页面。当跳转到此页面时，相当于直接切换到隐藏 Tab(并不一定等价于直接使用该 Tab，但通过复用加速其加载)。由于有可能浪费用户的带宽，Chrome 将 prerender 视为 NoState 预取。</p><h2 id="subresource" tabindex="-1"><a class="header-anchor" href="#subresource" aria-hidden="true">#</a> subresource</h2><p>非标准规范，也无法确定资源的优先级(as 当时还不存在)</p>`,24),o=[p];function l(c,u){return n(),s("div",null,o)}const d=a(e,[["render",l],["__file","link标签资源预加载.html.vue"]]);export{d as default};
