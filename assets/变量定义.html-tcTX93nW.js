import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as t}from"./app-qSMjXEym.js";const e={},l=t(`<h1 id="变量定义" tabindex="-1"><a class="header-anchor" href="#变量定义" aria-hidden="true">#</a> 变量定义</h1><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h2><table><thead><tr><th style="text-align:center;">区别</th><th style="text-align:center;">var</th><th style="text-align:center;">let</th><th style="text-align:center;">const</th><th style="text-align:center;">function</th></tr></thead><tbody><tr><td style="text-align:center;">是否有块级作用域</td><td style="text-align:center;">×</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">是否存在变量提升</td><td style="text-align:center;">✔️</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">✔️</td></tr><tr><td style="text-align:center;">是否添加全局属性</td><td style="text-align:center;">✔️</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">✔️</td></tr><tr><td style="text-align:center;">能否重复声明变量</td><td style="text-align:center;">✔️</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">✔️</td></tr><tr><td style="text-align:center;">是否存在暂时性死区</td><td style="text-align:center;">×</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">x</td></tr><tr><td style="text-align:center;">是否必须设置初始值</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td></tr><tr><td style="text-align:center;">能否改变指针指向</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">×</td><td style="text-align:center;">✔️</td></tr></tbody></table><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><ol><li>块级作用域</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// let和const具有块级作用域</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token string">&#39;16&#39;</span>
  <span class="token comment">// var不存在块级作用域</span>
  <span class="token keyword">var</span> name1 <span class="token operator">=</span> <span class="token string">&#39;tom&#39;</span>

  <span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name2 <span class="token operator">=</span> <span class="token string">&#39;jerry&#39;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span> <span class="token comment">// tom</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment">// fn -&gt; 非严格模式&amp;node下, 严格模式下存在块级作用域</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">// ReferenceError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>变量提升</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var存在变量提升</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
<span class="token comment">// let和const不存在变量提升</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// ReferenceError</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>全局添加属性</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var在顶级作用域声明的变量会将该变量添加为全局对象的属性，let和const不会</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// a</span>

<span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>fn<span class="token punctuation">)</span> <span class="token comment">// fn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>重复声明</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var声明变量时，可以重复声明变量，const和let不允许</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;a1&#39;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;a2&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// a2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>暂时性死区</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// let、const命令声明变量之前，该变量都是不可用的</span>
<span class="token comment">// 与var的变量提升相反</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span> <span class="token comment">// ReferenceError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>初始值设置</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var和let 可以不用设置初始值</span>
<span class="token comment">// const声明变量必须设置初始值</span>
<span class="token keyword">var</span> a
<span class="token keyword">let</span> b
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>指针指向</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// const 不允许修改指针指向</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span>
a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span> <span class="token comment">// TypeError</span>
<span class="token comment">// 但只要不改变引用修改具体的属性不算</span>
a<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span>

<span class="token comment">// function</span>
<span class="token keyword">function</span> <span class="token function">ffn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

ffn <span class="token operator">=</span> <span class="token string">&#39;ffns&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ffn<span class="token punctuation">)</span> <span class="token comment">// ffns</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),c=[l];function o(p,i){return s(),a("div",null,c)}const u=n(e,[["render",o],["__file","变量定义.html.vue"]]);export{u as default};
