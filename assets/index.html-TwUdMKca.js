import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,a as n}from"./app-qSMjXEym.js";const p={},i=n(`<h1 id="图片" tabindex="-1"><a class="header-anchor" href="#图片" aria-hidden="true">#</a> 图片</h1><h2 id="有损、无损" tabindex="-1"><a class="header-anchor" href="#有损、无损" aria-hidden="true">#</a> 有损、无损</h2><ul><li><strong>无压缩</strong>：无压缩的图片格式不对图片数据进行压缩处理，能准确地呈现原图片。(<code>BMP</code>)</li><li><strong>无损压缩</strong>：只在压缩文件大小的过程中，图片的质量没有任何损耗。任何时候都可以从无损压缩过的图片中恢复出原来的信息。(<code>png</code>)</li><li><strong>有损压缩</strong>：指在压缩文件大小的过程中，损失了一部分图片的信息，也即降低了图片的质量，并且这种损失是不可逆的。(<code>jpg</code>)</li></ul><h2 id="索引色、直接色" tabindex="-1"><a class="header-anchor" href="#索引色、直接色" aria-hidden="true">#</a> 索引色、直接色</h2><blockquote><p>计算机在表示颜色的时候，有两种形式，一种称作索引颜色(Index Color)，一种称作直接颜色(Direct Color)。</p></blockquote><p><strong>索引色</strong></p><p>用一个数字来代表（索引）一种颜色，在存储图片的时候，存储一个数字的组合，同时存储数字到图片颜色的映射。这种方式只能存储有限种颜色，通常是256种颜色，对应到计算机系统中，使用一个字节的数字来索引一种颜色。</p><p><strong>直接色</strong></p><p>使用四个数字来代表一种颜色，这四个数字分别代表这个颜色中红色、绿色、蓝色以及透明度。现在流行的显示设备可以在这四个维度分别支持256种变化，所以直接色可以表示2的32次方种颜色。当然并非所有的直接色都支持这么多种，为压缩空间使用，有可能只有表达红、绿、蓝的三个数字，每个数字也可能不支持256种变化之多。</p><h2 id="点阵图、矢量图" tabindex="-1"><a class="header-anchor" href="#点阵图、矢量图" aria-hidden="true">#</a> 点阵图、矢量图</h2><p><strong>点阵图</strong></p><p>也叫做位图，像素图。构成点阵图的最小单位是象素，位图就是由象素阵列的排列来实现其显示效果的，每个象素有自己的颜色信息，在对位图图像进行编辑操作的时候，可操作的对象是每个象素，我们可以改变图像的色相、饱和度、明度，从而改变图像的显示效果。点阵图缩放会失真。</p><p><strong>矢量图</strong></p><p>也叫做向量图。矢量图并不纪录画面上每一点的信息，而是纪录了元素形状及颜色的算法，当你打开一付矢量图的时候，软件对图形象对应的函数进行运算，将运算结果（图形的形状和颜色）显示给你看。无论显示画面是大还是小，画面上的对象对应的算法是不变的，所以，即使对画面进行倍数相当大的缩放，其显示效果仍然相同(不失真)。</p><h2 id="格式" tabindex="-1"><a class="header-anchor" href="#格式" aria-hidden="true">#</a> 格式</h2><h3 id="jpeg" tabindex="-1"><a class="header-anchor" href="#jpeg" aria-hidden="true">#</a> JPEG</h3><p>介绍：JPEG是一种很灵活的格式，具有调节图像质量的功能，它允许用不同的压缩比例对文件进行压缩，支持多种压缩级别，压缩比率通常在10:1到40:1</p><p>优点: 压缩比高，能够有效地减少图片的大小，提高传输和存储效率；且颜色表现力好，能够真实地还原图片的颜色和细节。支持渐进显示。</p><p>缺点：压缩过程中会有数据损失和失真，对应的图片清晰度和质量会有所下降。不适合<code>logo</code>或者<code>icon</code>(大小上没有优势)</p><p>场景：需要快速传输和存储的图片场景</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于早期版本的Windows在文件扩展名长度方面有着最多3个字母的限制，所以JPEG被缩短为JPG，以免超过限制。而Mac和Linux没有这种限制，因此保存为JPEG，跨不同终操作系统的图像编辑程序最终会将其默认JPEG文件扩展名设置为JPG，以尽量减少混淆。</p></div><h3 id="png" tabindex="-1"><a class="header-anchor" href="#png" aria-hidden="true">#</a> PNG</h3><p>介绍：PNG（Portable Network Graphics），便携式网络图形，是一种采用无损压缩算法的位图格式，支持索引、灰度、RGB三种颜色方案以及Alpha通道等特性。其设计目的是试图替代GIF和TIFF文件格式，同时增加一些GIF文件格式所不具备的特性。</p><p>优点：清晰度高、质量好，能够保持图片的原始细节和颜色准确性；且跨平台兼容性好，可以在不同的操作系统和软件中保持一致的显示效果。</p><p>缺点：无损压缩的效率比较低，传输相对慢。</p><p>场景：需要高清晰度高显示的图片。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><blockquote><p>PNG8和PNG24后面的数字则是代表这种PNG格式最多可以索引和存储的颜色值。8代表2的8次方也就是256色，而24则代表2的24次方大概有1600多万色。</p></blockquote><p>PNG8: 8位的PNG最多支持256（2的8次方）种颜色，8位的PNG支持不透明、索引透明、alpha透明。</p><p>PNG24: 支持2的24次方种颜色，表现为不透明。PS导出PNG24是会根据你是否需要半透明选择PNG24还是PNG32</p><p>PNG32: 它是在PNG在24位的PNG基础上增加了8位的透明信息，支持不同程度的半透效果</p></div><h3 id="webp" tabindex="-1"><a class="header-anchor" href="#webp" aria-hidden="true">#</a> WEBP</h3><p>介绍：WebP 图片是一种新的图像格式，由 Google 开发。与 png 、jpg 相比，相同的视觉体验下，WebP 图像的尺寸缩小了大约 30％ 。另外，WebP 图像格式还支持有损压缩、无损压缩、透明和动画。</p><p>优点：压缩率高、解码速度快、支持 alpha 透明、图像质量差异小。</p><p>缺点：兼容度有限。</p><p>应用场景：高压缩比，适合网络快速传输。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；</li><li>在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；</li><li>WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。</li></ul></div><h3 id="gif" tabindex="-1"><a class="header-anchor" href="#gif" aria-hidden="true">#</a> GIF</h3><p>介绍：GIF(Graphics Interchange Format)的原义是“图像互换格式”，GIF文件的数据，是一种基于LZW算法(串表压缩算法)连续色调的无损压缩格式。是目前web网页中十分常用的一种动画文件格式。</p><p>优点：保证图像质量的同时体积变得很小、动画效果、有限的透明度。</p><p>缺点：gif只存储8位索引（也就是最多能表达 2^8=256 种颜色），色彩复杂、细节丰富的图片不适合保存为 gif 格式。色彩简单的 logo 、icon、线框图适合采用 gif 格式</p><p>应用场景： 需要动态展示图片的场景。</p><h3 id="svg" tabindex="-1"><a class="header-anchor" href="#svg" aria-hidden="true">#</a> SVG</h3><p>介绍：SVG（Scalable Vector Graphics）是一种描述二维图形的语言。作为独立格式或与其他XML混合使用时，它使用XML语法。HTML文档中使用的SVG代码使用HTML语法。</p><p>优点：SVG 是矢量图形，不受像素影响，在不同平台上都表现良好；可以通过JS控制实现动画效果</p><p>缺点：因为是矢量图，不能展现位图的丰富真实色彩</p><p>应用场景：矢量图形，可缩放；无需多端、多分辨率适配</p><h3 id="avif" tabindex="-1"><a class="header-anchor" href="#avif" aria-hidden="true">#</a> AVIF</h3><p>介绍：AVIF（ AV1 Image File Format）是一种由AOM（ Alliance for Open Media）开发的基于AV1编解码器的网络图像格式。这是一种开源免版税的图像格式。AVIF支持全分辨率的10位和12位色彩以及HDR。</p><p>优点：实现比 JPEG 和 PNG 甚至 WebP 高得多的压缩比，同时保持或提高图像质量。</p><p>缺点：浏览器兼容性支持，复杂的解码算法可能会消耗更多时间和CPU损耗</p><p>应用场景：高压缩比，适合网络快速传输。</p><h2 id="精灵图-css-sprites" tabindex="-1"><a class="header-anchor" href="#精灵图-css-sprites" aria-hidden="true">#</a> 精灵图(CSS Sprites)</h2><p>介绍：将多张比较小的图片，合并到一张大的图片上面，大的图片背景透明，使用的时候，通过位置的改变来获取对应所需的图片</p><p>优点: 减少HTTP请求数量，降低服务器压力</p><p>缺点:</p><ul><li>后期维护困难，添加新图片需要重新制作</li><li>每一张图都需要计算位置，通过调整位置来展示图片，对误差的要求很严格</li><li>只能通过背景使用，无法通过<code>img</code>标签使用</li></ul><p>应用场景: 量多体积小且尺寸较为均一的小图标</p><h2 id="图标字体-iconfont" tabindex="-1"><a class="header-anchor" href="#图标字体-iconfont" aria-hidden="true">#</a> 图标字体(iconfont)</h2><p>介绍：字体图标是一种使用字体来展示图标的技术，将图标设计成矢量形式，以字体的方式嵌入到网页中，从而实现网页中的图标展示</p><p>优点：</p><ul><li>可以方便地将任何 CSS 效果应用于它们</li><li>矢量图形可伸缩，并且保真</li><li>相比于图片更少的HTTP请求</li><li>在所有浏览器中都得到支持(IE6)</li></ul><p>缺点:</p><ul><li>不能用来显示复杂图像</li><li>通常只限于一种颜色，除非应用一些 CSS 技巧</li></ul><p>应用场景: 对颜色展示没有过多要求的单色图标</p><h2 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h2><blockquote><p>图像切片是指将大图(几百M甚至几个G)分割成若干个小图的过程，以便于存储和处理</p></blockquote><h2 id="渐进式jpeg" tabindex="-1"><a class="header-anchor" href="#渐进式jpeg" aria-hidden="true">#</a> 渐进式JPEG</h2><p>介绍：jpg格式的图片在呈现的时候，有两种方式，一种是自上而下扫描式的，还有一种就是先是全部的模糊图片，然后逐渐清晰(就像GIF格式的交错显示)</p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>压缩比可以在 Photoshop 等程序中自定义</td><td>Internet Explorer 8 及以下版本在显示 PJPEG 时存在严重问题</td></tr><tr><td>文件体积小</td><td>不支持透明背景</td></tr><tr><td>较高的图像质量和较高的图像压缩率</td><td>在高网速环境下，相差的加载时间可以忽略不计</td></tr><tr><td>对用户体验有积极影响，不必将空白页面面对用户</td><td>用户无法判断图像何时完成加载，给网速慢的用户留下错误的印象，认为图片模糊</td></tr></tbody></table><h2 id="响应式图像" tabindex="-1"><a class="header-anchor" href="#响应式图像" aria-hidden="true">#</a> 响应式图像</h2><blockquote><p>浏览器根据屏幕大小、设备像素比、横竖屏自动加载合适的图像。前者可指定选择的图像以及其大小，后者会定义一组媒体条件并声明填充的宽度。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
  <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elva-fairy-320w.jpg 320w,elva-fairy-480w.jpg 480w,elva-fairy-800w.jpg 800w<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(max-width: 320px) 280px,(max-width: 480px) 440px,800px<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elva-fairy-800w.jpg<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),s=[i];function r(d,o){return e(),t("div",null,s)}const h=a(p,[["render",r],["__file","index.html.vue"]]);export{h as default};
